<?xml version="1.0" encoding="UTF-8"?>

<?xml-stylesheet href="http://moise.sourceforge.net/xml/os.xsl" type="text/xsl" ?>

<organisational-specification
    id="atm_exceptions" os-version="0.8"

    xmlns='http://moise.sourceforge.net/os'
    xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>

    <structural-specification>

        <role-definitions>
            <role id="atmHandler" />
            <role id="requestHandler" />
            <role id="reader" />
            <role id="parser" />
            <role id="moneyKeeper" />
        </role-definitions>

        <group-specification id="atm_group">
            <roles>
                <role id="atmHandler" min="1" max="1" />
                <role id="requestHandler" min="1" max="1" />
                <role id="reader" min="1" max="1" />
                <role id="parser" min="1" max="1" />
                <role id="moneyKeeper" min="1" max="1" />
            </roles>
        </group-specification>

    </structural-specification>



    <functional-specification>

        <scheme id="atm_sch">

            <goal id="withdraw">
                <plan operator="sequence">
                    <goal id="obtainAmount">
                        <plan operator="sequence">
                            <goal id="getAmountAsString" />
                            <goal id="parseAmount" />
                        </plan>
                    </goal>
                    <goal id="provideMoney" />
                </plan>
            </goal>

            <recovery-strategy id="rec1">
                <notification-policy id="np1">
                	<condition type="custom"> <!-- must-notify-when -->
                		<condition-argument id="formula" value="scheme_id(S) &amp; failed(S,parseAmount)" />
					</condition>
                    <exception-spec id="nan">
                    	<exception-argument id="index" arity="1" />
                    </exception-spec>
                    <!-- THROWING GOAL -->
                    <goal id="throwNan" />
                </notification-policy>
                <handling-policy id="hp1">
                   <condition type="always" />
                   <!-- CATCHING GOAL -->
                   <goal id="recoverFromNan" />
                </handling-policy>

            </recovery-strategy>

            <!--<notification-policy>
                <target id="parseAmount" />
                <exception-spec id="not_a_number">
                    <exception-argument functor="index" arity="1" />
                    <throwing-goal id="throwNan" when="failed(parseAmount)" />
                    <catching-goal id="recoverFromNan" />
                </exception-spec>
                <exception-spec id="parsing_delay">
                    <exception-argument functor="eta" arity="1" />
                    <throwing-goal id="" when="delay(parseAmount)" />
                    <catching-goal id="recoverF" when="eta(N) &amp; N<2"/>
                    <catching-goal id="recoverFromNan" />
                    <catching-goal id="recoverFromNan" />
                </exception-spec>
            </notification-policy>



            exceptionSpec(id, target, condition)
            exceptionArgument(exception id, functor, arity)
            throwingGoal(exception id, goal id)
            catchingGoal(exception id, goal id, when)
            -->

            

            <recovery-strategy id="rec2">

                <notification-policy id="np2">

					<condition type="goal-failure"> <!-- must-notify-when -->
                		<condition-argument id="target" value="recoverFromNan" />
					</condition>

                    <exception-spec id="amountUnavailable" />

                    <goal id="throwAmountUnavailable" />

                </notification-policy>

                <handling-policy id="hp2">
                
                	<condition type="always" />
                	
                    <goal id="retryLater" />
                    
                </handling-policy>

            </recovery-strategy>

            <mission id="mGetAmountAsString" min="1" max="1">
                <goal id="getAmountAsString" />
            </mission>
            <mission id="mParseAmount" min="1" max="1">
                <goal id="parseAmount" />
                <goal id="throwNan" />
            </mission>
            <mission id="mObtainAmount" min="1" max="1">
                <goal id="obtainAmount" />
                <goal id="throwAmountUnavailable" />
                <goal id="recoverFromNan" />
            </mission>
            <mission id="mProvideMoney" min="1" max="1">
                <goal id="provideMoney" />
            </mission>
            <mission id="mWithdraw" min="1" max="1">
                <goal id="withdraw" />
                <goal id="retryLater" />
            </mission>

        </scheme>

    </functional-specification>

    <normative-specification>
        <norm id="n1" type="obligation" role="atmHandler"
            mission="mWithdraw" />
        <norm id="n2" type="obligation" role="requestHandler"
            mission="mObtainAmount" />
        <norm id="n3" type="obligation" role="reader"
            mission="mGetAmountAsString" />
        <norm id="n4" type="obligation" role="parser"
            mission="mParseAmount" />
        <norm id="n5" type="obligation" role="moneyKeeper"
            mission="mProvideMoney" />
    </normative-specification>

</organisational-specification>
